<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20194.20.0119.2058                               -->
<workbook original-version='18.1' source-build='2019.4.2 (20194.20.0119.2058)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Titanic Training' inline='true' name='federated.0jbz83q0w4bmof1e5znwe01jspvs' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Titanic Training' name='textscan.17tv02g1xonu2b1b8cb2q1hkeaic'>
            <connection class='textscan' directory='C:/Users/VenkateshkumarSivaku/Downloads' filename='Titanic Training.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.17tv02g1xonu2b1b8cb2q1hkeaic' name='Titanic Training.csv' table='[Titanic Training#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='Row No.' ordinal='0' />
            <column datatype='string' name='Survived' ordinal='1' />
            <column datatype='real' name='Age' ordinal='2' />
            <column datatype='string' name='Passenger' ordinal='3' />
            <column datatype='string' name='Sex' ordinal='4' />
            <column datatype='integer' name='Siblings' ordinal='5' />
            <column datatype='integer' name='Parents' ordinal='6' />
            <column datatype='real' name='Fair' ordinal='7' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Titanic Training.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Row No.</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Row No.]</local-name>
            <parent-name>[Titanic Training.csv]</parent-name>
            <remote-alias>Row No.</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Survived</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Survived]</local-name>
            <parent-name>[Titanic Training.csv]</parent-name>
            <remote-alias>Survived</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Age</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Age]</local-name>
            <parent-name>[Titanic Training.csv]</parent-name>
            <remote-alias>Age</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Passenger</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Passenger]</local-name>
            <parent-name>[Titanic Training.csv]</parent-name>
            <remote-alias>Passenger</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sex</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Sex]</local-name>
            <parent-name>[Titanic Training.csv]</parent-name>
            <remote-alias>Sex</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Siblings</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Siblings]</local-name>
            <parent-name>[Titanic Training.csv]</parent-name>
            <remote-alias>Siblings</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Parents</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Parents]</local-name>
            <parent-name>[Titanic Training.csv]</parent-name>
            <remote-alias>Parents</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Fair</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Fair]</local-name>
            <parent-name>[Titanic Training.csv]</parent-name>
            <remote-alias>Fair</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='QuickTrain' datatype='string' name='[Calculation_1924725917076062209]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import os&#13;&#10;import sys&#13;&#10;import pandas as pd&#13;&#10;from tabpy_client import Client&#13;&#10;&#13;&#10;AUTOMODEL_URL = &apos;https://go-develop.rapidminer.com&apos;&#13;&#10;tabclient = Client(&apos;http://localhost:9004/&apos;)&#13;&#10;&#13;&#10;&#13;&#10;import tabpy&#13;&#10;import json&#13;&#10;&#13;&#10;Survived = _arg1&#13;&#10;Age = _arg2&#13;&#10;Passenger = _arg3&#13;&#10;Sex = _arg4&#13;&#10;Siblings = _arg5&#13;&#10;Parents = _arg6&#13;&#10;Fair = _arg7&#13;&#10;&#13;&#10;data = pd.DataFrame(&#13;&#10;    {&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;: Parents,&#13;&#10;     &apos;Fair&apos;: Fair})&#13;&#10;data[&apos;Age&apos;] = data[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;data[&apos;Siblings&apos;] = data[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;data[&apos;Parents&apos;] = data[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;data[&apos;Fair&apos;] = data[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;data = data.dropna(subset=[&apos;Survived&apos;])&#13;&#10;&#13;&#10;&#13;&#10;# dataframe to json&#13;&#10;responseJSON = data.to_json(orient=&apos;records&apos;)&#13;&#10;dataId = json.loads(responseJSON)&#13;&#10;print(data)&#13;&#10;&#13;&#10;returnResult = tabclient.query(&apos;Rapidminer_Quick_Automodel&apos;, AUTOMODEL_URL, &apos;vsivakumar@rapidminer.com&apos;,&apos;wXv2jBF&amp;v2Nm&apos;, dataId, &apos;Survived&apos;, &apos;tableauclient&apos;)&#13;&#10;print(returnResult[&apos;response&apos;])&#13;&#10;&#13;&#10;return returnResult[&apos;response&apos;]&#13;&#10;&quot;,&#13;&#10;ATTR([Survived]),ATTR([Age]),ATTR([Passenger]),ATTR([Sex]),ATTR([Siblings]),ATTR([Parents]),ATTR([Fair]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='TitanicPredict' datatype='string' name='[Calculation_2361856543278223360]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import os&#13;&#10;import sys&#13;&#10;import pandas as pd&#13;&#10;sys.path.insert(0, os.path.abspath(&apos;C:/Users/VenkateshkumarSivaku/pycharm/Task1&apos;))&#13;&#10;import automodelweb as amw&#13;&#10;import time&#13;&#10;import importlib&#13;&#10;import json&#13;&#10;from pandas.io.json import json_normalize&#13;&#10;import tabpy&#13;&#10;&#13;&#10;LABEL_ATTRIBUTE = &apos;Survived&apos;&#13;&#10;TASK_STATE = &apos;state&apos;&#13;&#10;FEATURE = &apos;performance&apos;&#13;&#10;SUB_FEATURE = &apos;percentages&apos;&#13;&#10;PARAM = &apos;accuracy&apos;&#13;&#10;FINISHED_STATUS = &apos;FINISHED&apos;&#13;&#10;DATA_ID = &apos;id&apos;&#13;&#10;DEPLOYMENT_ID = &apos;DeploymentID&apos;&#13;&#10;STATUS = &apos;Deployment_Status&apos;&#13;&#10;MODEL = &apos;Deployed_Model&apos;&#13;&#10;&#13;&#10;AUTOMODEL_URL = &apos;https://aicloud-develop.rapidminer.com&apos;&#13;&#10;USER_ID = &apos;vsivakumar@rapidminer.com&apos;&#13;&#10;PASSWORD = &apos;wXv2jBF&amp;v2Nm&apos;&#13;&#10;&#13;&#10;PREDICTION = &apos;prediction(Survived)&apos;&#13;&#10;depID = &apos;52601642-a69f-4ecb-8b86-1ce345fad436&apos;&#13;&#10;&#13;&#10;# To refresh the changes made in AutoModelWeb&#13;&#10;importlib.reload(amw)&#13;&#10;&#13;&#10;# To get the AMW instance&#13;&#10;client = amw.AutomodelWeb(AUTOMODEL_URL, USER_ID, PASSWORD)&#13;&#10;Survived = _arg1&#13;&#10;Age = _arg2&#13;&#10;Passenger = _arg3&#13;&#10;Sex = _arg4&#13;&#10;Siblings = _arg5&#13;&#10;Parents = _arg6&#13;&#10;Fair = _arg7&#13;&#10;  &#13;&#10;data = pd.DataFrame({&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;:Parents, &apos;Fair&apos;: Fair})&#13;&#10;data[&apos;Age&apos;] = data[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;data[&apos;Siblings&apos;] = data[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;data[&apos;Parents&apos;] = data[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;data[&apos;Fair&apos;] = data[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;data = data.dropna(subset = [&apos;Survived&apos;])&#13;&#10;&#13;&#10;test = pd.DataFrame({&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;:Parents, &apos;Fair&apos;: Fair})&#13;&#10;test[&apos;Age&apos;] = test[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;test[&apos;Siblings&apos;] = test[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;test[&apos;Parents&apos;] = test[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;test[&apos;Fair&apos;] = test[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;test = test[pd.isnull(test[&apos;Survived&apos;])]&#13;&#10;#test = test.reset_index(drop=True)&#13;&#10;&#13;&#10;print(&apos;training&apos;)&#13;&#10;print(data)&#13;&#10;print(&apos;test&apos;)&#13;&#10;print(test)&#13;&#10;&#13;&#10;#dataframe to json&#13;&#10;jd = test.to_json(orient=&apos;records&apos;)&#13;&#10;jsonData = json.loads(jd)&#13;&#10;&#13;&#10;#dataframe to json&#13;&#10;responseJSON = client.add_dataFrame(data)&#13;&#10;dataId = responseJSON[DATA_ID]&#13;&#10;&#13;&#10;&#13;&#10;modelingTask = client.create_modeling_task(dataId)&#13;&#10;modelingTaskID = modelingTask[DATA_ID]&#13;&#10;&#13;&#10;#setting label&#13;&#10;client.set_label(modelingTaskID, LABEL_ATTRIBUTE)&#13;&#10;client.set_class_interest(modelingTaskID, &apos;Yes&apos;, &apos;No&apos;)&#13;&#10;client.set_cost_matrix(modelingTaskID, [[1, -1], [-1, 1]])&#13;&#10;print(&apos;TaskID:&apos; + modelingTaskID)&#13;&#10;&#13;&#10;#Initiating model training&#13;&#10;client.start_execution(modelingTaskID)&#13;&#10;flag = True&#13;&#10;&#13;&#10;#Loops till all the task are completed&#13;&#10;while (flag):&#13;&#10;&#9;flag = False&#13;&#10;&#9;r = client.get_modeling_execution(modelingTaskID)&#13;&#10;&#9;states = map(lambda x: x[TASK_STATE], r)&#13;&#10;&#9;for state in states:&#13;&#10;&#9;&#9;if str(state).strip() != FINISHED_STATUS:&#13;&#10;&#9;&#9;&#9;print(state)&#13;&#10;&#9;&#9;&#9;flag = True&#13;&#10;&#13;&#10;#Obtaining the trained model results&#13;&#10;result = client.get_execution_result(modelingTaskID)&#13;&#10;&#13;&#10;#To find the best model**add or remove features if needed to get a value of more or less deep rooted in Json*&#13;&#10;features = [FEATURE, SUB_FEATURE, PARAM]&#13;&#10;bestModel = client.determine_best_model(features)&#13;&#10;&#13;&#10;#Deploying the best model&#13;&#10;deploymentID = client.deploy_model(modelingTaskID, bestModel)&#13;&#10;status = &apos;Failed&apos;&#13;&#10;if str(deploymentID) != &apos;&apos;:&#13;&#10;&#9;status = &apos;Success&apos;&#13;&#10;&#13;&#10;#Binding DeploymentID, Status and Best Model together in a dictionary to return as a output&#13;&#10;out_result = {DEPLOYMENT_ID: deploymentID, STATUS: status, MODEL: bestModel}&#13;&#10;final_out = json_normalize(out_result)&#13;&#10;print(&apos;DeploymentID:&apos;+str(deploymentID))&#13;&#10;depID = deploymentID&#13;&#10;&#13;&#10;print(&apos;Start to score&apos;)&#13;&#10;#passing the test data to deployed model to score&#13;&#10;scoreResult = client.score(jsonData, depID)&#13;&#10;&#13;&#10;print(&apos;Start to result&apos;)&#13;&#10;#converting result json to dataframe&#13;&#10;result = json_normalize(scoreResult[&apos;data&apos;])&#13;&#10;&#13;&#10;print(&apos;initiating list&apos;)&#13;&#10;#List to add the result data&#13;&#10;prediction=[]&#13;&#10;&#13;&#10;#Number of records in input&#13;&#10;max_length = len(test.index)&#13;&#10;max_data_length = len(data.index)&#13;&#10;&#13;&#10;#Adding survived to a list&#13;&#10;for i in range(0,max_data_length):&#13;&#10;    prediction.append(data.iloc[i][&apos;Survived&apos;])&#13;&#10;&#13;&#10;#Adding confidence and predictions to a list&#13;&#10;for i in range(0,max_length):&#13;&#10;    prediction.append(result.iloc[i][PREDICTION])&#13;&#10;print(&apos;returning result&apos;)&#13;&#10;return prediction&#13;&#10;&quot;,&#13;&#10;ATTR([Survived]),ATTR([Age]),ATTR([Passenger]),ATTR([Sex]),ATTR([Siblings]),ATTR([Parents]),ATTR([Fair]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='TrainScoreDeploy' datatype='string' name='[Calculation_2846837937960083456]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;from tabpy_client import Client&#13;&#10;import json&#13;&#10;AUTOMODEL_URL = &apos;https://go-develop.rapidminer.com&apos;&#13;&#10;&#13;&#10;tabclient = Client(&apos;http://localhost:9004/&apos;)&#13;&#10;&#13;&#10;&#13;&#10;Survived = _arg1&#13;&#10;Age = _arg2&#13;&#10;Passenger = _arg3&#13;&#10;Sex = _arg4&#13;&#10;Siblings = _arg5&#13;&#10;Parents = _arg6&#13;&#10;Fair = _arg7&#13;&#10;&#13;&#10;traindataframe = pd.DataFrame(&#13;&#10;    {&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;: Parents,&#13;&#10;     &apos;Fair&apos;: Fair})&#13;&#10;traindataframe[&apos;Age&apos;] = traindataframe[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Siblings&apos;] = traindataframe[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Parents&apos;] = traindataframe[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Fair&apos;] = traindataframe[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe = traindataframe.dropna(subset=[&apos;Survived&apos;])&#13;&#10;&#13;&#10;scoredataframe = pd.DataFrame(&#13;&#10;    {&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;: Parents,&#13;&#10;     &apos;Fair&apos;: Fair})&#13;&#10;scoredataframe[&apos;Age&apos;] = scoredataframe[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;scoredataframe[&apos;Siblings&apos;] = scoredataframe[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;scoredataframe[&apos;Parents&apos;] = scoredataframe[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;scoredataframe[&apos;Fair&apos;] = scoredataframe[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;scoredataframe = scoredataframe[pd.isnull(scoredataframe[&apos;Survived&apos;])]&#13;&#10;&#13;&#10;&#13;&#10;# dataframe to json&#13;&#10;scoreJsonConversion = scoredataframe.to_json(orient=&apos;records&apos;)&#13;&#10;scoreJsonValue = json.loads(scoreJsonConversion)&#13;&#10;&#13;&#10;# dataframe to json&#13;&#10;trainJsonConversion = traindataframe.to_json(orient=&apos;records&apos;)&#13;&#10;trainJsonValue = json.loads(trainJsonConversion)&#13;&#10;&#13;&#10;&#13;&#10;trainAndPredictionList = tabclient.query(&apos;RapidMinerTrainAndScore&apos;, AUTOMODEL_URL,&apos;vsivakumar@rapidminer.com&apos;, &apos;wXv2jBF&amp;v2Nm&apos;, trainJsonValue, scoreJsonValue, &apos;Survived&apos;, &apos;tableauclient&apos;)&#13;&#10;print(trainAndPredictionList[&apos;response&apos;])&#13;&#10; &#13;&#10;return trainAndPredictionList[&apos;response&apos;]&#13;&#10;&quot;,&#13;&#10;ATTR([Survived]),ATTR([Age]),ATTR([Passenger]),ATTR([Sex]),ATTR([Siblings]),ATTR([Parents]),ATTR([Fair]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='ScoreDeploy' datatype='string' name='[Calculation_2846837938047246338]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;from tabpy_client import Client&#13;&#10;import json&#13;&#10;&#13;&#10;tabclient = Client(&apos;http://localhost:9004/&apos;)&#13;&#10;&#13;&#10;depID = &apos;7731960d-b270-4c26-bba5-edf38b0dc25b&apos;&#13;&#10;Survived = _arg1&#13;&#10;Age = _arg2&#13;&#10;Passenger = _arg3&#13;&#10;Sex = _arg4&#13;&#10;Siblings = _arg5&#13;&#10;Parents = _arg6&#13;&#10;Fair = _arg7&#13;&#10;&#13;&#10;&#13;&#10;test = pd.DataFrame(&#13;&#10;    {&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;: Parents,&#13;&#10;     &apos;Fair&apos;: Fair})&#13;&#10;test[&apos;Age&apos;] = test[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;test[&apos;Siblings&apos;] = test[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;test[&apos;Parents&apos;] = test[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;test[&apos;Fair&apos;] = test[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;test = test[pd.isnull(test[&apos;Survived&apos;])]&#13;&#10;&#13;&#10;# dataframe to json&#13;&#10;jd = test.to_json(orient=&apos;records&apos;)&#13;&#10;jsonDataOfInputTest = json.loads(jd)&#13;&#10;&#13;&#10;&#13;&#10;predictedList = tabclient.query(&apos;RapidMinerTest&apos;, &apos;vsivakumar@rapidminer.com&apos;, &apos;wXv2jBF&amp;v2Nm&apos;, jsonDataOfInputTest, &apos;Survived&apos;, depID)&#13;&#10;print(predictedList[&apos;response&apos;])&#13;&#10;&#13;&#10;return predictedList[&apos;response&apos;]&#13;&#10;&quot;,&#13;&#10;ATTR([Survived]),ATTR([Age]),ATTR([Passenger]),ATTR([Sex]),ATTR([Siblings]),ATTR([Parents]),ATTR([Fair]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='TrainDeployed' datatype='string' name='[Calculation_2846837938310324228]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;from tabpy_client import Client&#13;&#10;import json&#13;&#10;&#13;&#10;AUTOMODEL_URL = &apos;https://go-develop.rapidminer.com&apos;&#13;&#10;tabclient = Client(&apos;http://localhost:9004/&apos;)&#13;&#10;&#13;&#10;&#13;&#10;Survived = _arg1&#13;&#10;Age = _arg2&#13;&#10;Passenger = _arg3&#13;&#10;Sex = _arg4&#13;&#10;Siblings = _arg5&#13;&#10;Parents = _arg6&#13;&#10;Fair = _arg7&#13;&#10;&#13;&#10;traindataframe = pd.DataFrame(&#13;&#10;    {&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;: Parents,&#13;&#10;     &apos;Fair&apos;: Fair})&#13;&#10;traindataframe[&apos;Age&apos;] = traindataframe[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Siblings&apos;] = traindataframe[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Parents&apos;] = traindataframe[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Fair&apos;] = traindataframe[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe = traindataframe.dropna(subset=[&apos;Survived&apos;])&#13;&#10;&#13;&#10;&#13;&#10;# dataframe to json&#13;&#10;trainJsonConversion = traindataframe.to_json(orient=&apos;records&apos;)&#13;&#10;trainJsonValue = json.loads(trainJsonConversion)&#13;&#10;&#13;&#10;&#13;&#10;trainLableList = tabclient.query(&apos;RapidMinerTrain&apos;, AUTOMODEL_URL, &apos;vsivakumar@rapidminer.com&apos;,&apos;wXv2jBF&amp;v2Nm&apos;, trainJsonValue, &apos;Survived&apos;, &apos;tableauclient&apos;)&#13;&#10;print(trainLableList[&apos;response&apos;])&#13;&#10;&#13;&#10;return trainLableList[&apos;response&apos;]&#13;&#10;&quot;,&#13;&#10;ATTR([Survived]),ATTR([Age]),ATTR([Passenger]),ATTR([Sex]),ATTR([Siblings]),ATTR([Parents]),ATTR([Fair]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <extract count='-1' enabled='false' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/VenkateshkumarSivaku/Desktop/AMW_Tabpy_TableauSever/Titanic Training.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='02/25/2020 08:53:44 PM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Titanic Training' increment-value='%null%' refresh-type='create' rows-inserted='916' timestamp-start='2020-02-25 20:53:44.307' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Row No.</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Row No.]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Row No.</remote-alias>
              <ordinal>0</ordinal>
              <family>Titanic Training.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>916</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Survived</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Survived]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Survived</remote-alias>
              <ordinal>1</ordinal>
              <family>Titanic Training.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Age</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Age]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Age</remote-alias>
              <ordinal>2</ordinal>
              <family>Titanic Training.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>91</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Passenger</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Passenger]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Passenger</remote-alias>
              <ordinal>3</ordinal>
              <family>Titanic Training.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sex</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Sex]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sex</remote-alias>
              <ordinal>4</ordinal>
              <family>Titanic Training.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Siblings</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Siblings]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Siblings</remote-alias>
              <ordinal>5</ordinal>
              <family>Titanic Training.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>7</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Parents</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Parents]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Parents</remote-alias>
              <ordinal>6</ordinal>
              <family>Titanic Training.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>8</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Fair</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Fair]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Fair</remote-alias>
              <ordinal>7</ordinal>
              <family>Titanic Training.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>254</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Flag</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Flag]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Flag</remote-alias>
              <ordinal>8</ordinal>
              <family>Titanic Training.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.394207' measure-ordering='alphabetic' measure-percentage='0.605793' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Score'>
      <table>
        <view>
          <datasources>
            <datasource caption='Titanic Training' name='federated.0jbz83q0w4bmof1e5znwe01jspvs' />
          </datasources>
          <datasource-dependencies datasource='federated.0jbz83q0w4bmof1e5znwe01jspvs'>
            <column datatype='real' name='[Age]' role='measure' type='quantitative' />
            <column caption='ScoreDeploy' datatype='string' name='[Calculation_2846837938047246338]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;from tabpy_client import Client&#13;&#10;import json&#13;&#10;&#13;&#10;tabclient = Client(&apos;http://localhost:9004/&apos;)&#13;&#10;&#13;&#10;depID = &apos;7731960d-b270-4c26-bba5-edf38b0dc25b&apos;&#13;&#10;Survived = _arg1&#13;&#10;Age = _arg2&#13;&#10;Passenger = _arg3&#13;&#10;Sex = _arg4&#13;&#10;Siblings = _arg5&#13;&#10;Parents = _arg6&#13;&#10;Fair = _arg7&#13;&#10;&#13;&#10;&#13;&#10;test = pd.DataFrame(&#13;&#10;    {&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;: Parents,&#13;&#10;     &apos;Fair&apos;: Fair})&#13;&#10;test[&apos;Age&apos;] = test[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;test[&apos;Siblings&apos;] = test[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;test[&apos;Parents&apos;] = test[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;test[&apos;Fair&apos;] = test[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;test = test[pd.isnull(test[&apos;Survived&apos;])]&#13;&#10;&#13;&#10;# dataframe to json&#13;&#10;jd = test.to_json(orient=&apos;records&apos;)&#13;&#10;jsonDataOfInputTest = json.loads(jd)&#13;&#10;&#13;&#10;&#13;&#10;predictedList = tabclient.query(&apos;RapidMinerTest&apos;, &apos;vsivakumar@rapidminer.com&apos;, &apos;wXv2jBF&amp;v2Nm&apos;, jsonDataOfInputTest, &apos;Survived&apos;, depID)&#13;&#10;print(predictedList[&apos;response&apos;])&#13;&#10;&#13;&#10;return predictedList[&apos;response&apos;]&#13;&#10;&quot;,&#13;&#10;ATTR([Survived]),ATTR([Age]),ATTR([Passenger]),ATTR([Sex]),ATTR([Siblings]),ATTR([Parents]),ATTR([Fair]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' name='[Fair]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Parents]' role='measure' type='quantitative' />
            <column datatype='string' name='[Passenger]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Row No.]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Siblings]' role='measure' type='quantitative' />
            <column datatype='string' name='[Survived]' role='dimension' type='nominal' />
            <column-instance column='[Row No.]' derivation='None' name='[none:Row No.:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Survived]' derivation='None' name='[none:Survived:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2846837938047246338]' derivation='User' name='[usr:Calculation_2846837938047246338:nk]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Survived:nk]'>
            <groupfilter function='member' level='[none:Survived:nk]' member='%null%' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Survived:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837938047246338:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/times' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Row No.:ok]</rows>
        <cols />
      </table>
      <simple-id uuid='{E7FCEF8F-AA72-4F02-90EA-673630F0A533}' />
    </worksheet>
    <worksheet name='Train'>
      <table>
        <view>
          <datasources>
            <datasource caption='Titanic Training' name='federated.0jbz83q0w4bmof1e5znwe01jspvs' />
          </datasources>
          <datasource-dependencies datasource='federated.0jbz83q0w4bmof1e5znwe01jspvs'>
            <column datatype='real' name='[Age]' role='measure' type='quantitative' />
            <column caption='TrainDeployed' datatype='string' name='[Calculation_2846837938310324228]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;from tabpy_client import Client&#13;&#10;import json&#13;&#10;&#13;&#10;AUTOMODEL_URL = &apos;https://go-develop.rapidminer.com&apos;&#13;&#10;tabclient = Client(&apos;http://localhost:9004/&apos;)&#13;&#10;&#13;&#10;&#13;&#10;Survived = _arg1&#13;&#10;Age = _arg2&#13;&#10;Passenger = _arg3&#13;&#10;Sex = _arg4&#13;&#10;Siblings = _arg5&#13;&#10;Parents = _arg6&#13;&#10;Fair = _arg7&#13;&#10;&#13;&#10;traindataframe = pd.DataFrame(&#13;&#10;    {&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;: Parents,&#13;&#10;     &apos;Fair&apos;: Fair})&#13;&#10;traindataframe[&apos;Age&apos;] = traindataframe[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Siblings&apos;] = traindataframe[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Parents&apos;] = traindataframe[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Fair&apos;] = traindataframe[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe = traindataframe.dropna(subset=[&apos;Survived&apos;])&#13;&#10;&#13;&#10;&#13;&#10;# dataframe to json&#13;&#10;trainJsonConversion = traindataframe.to_json(orient=&apos;records&apos;)&#13;&#10;trainJsonValue = json.loads(trainJsonConversion)&#13;&#10;&#13;&#10;&#13;&#10;trainLableList = tabclient.query(&apos;RapidMinerTrain&apos;, AUTOMODEL_URL, &apos;vsivakumar@rapidminer.com&apos;,&apos;wXv2jBF&amp;v2Nm&apos;, trainJsonValue, &apos;Survived&apos;, &apos;tableauclient&apos;)&#13;&#10;print(trainLableList[&apos;response&apos;])&#13;&#10;&#13;&#10;return trainLableList[&apos;response&apos;]&#13;&#10;&quot;,&#13;&#10;ATTR([Survived]),ATTR([Age]),ATTR([Passenger]),ATTR([Sex]),ATTR([Siblings]),ATTR([Parents]),ATTR([Fair]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' name='[Fair]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Parents]' role='measure' type='quantitative' />
            <column datatype='string' name='[Passenger]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Row No.]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Siblings]' role='measure' type='quantitative' />
            <column datatype='string' name='[Survived]' role='dimension' type='nominal' />
            <column-instance column='[Row No.]' derivation='None' name='[none:Row No.:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Survived]' derivation='None' name='[none:Survived:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2846837938310324228]' derivation='User' name='[usr:Calculation_2846837938310324228:nk]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Survived:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Survived:nk]' member='&quot;No&quot;' />
              <groupfilter function='member' level='[none:Survived:nk]' member='&quot;Yes&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Survived:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837938310324228:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/asterisk' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Row No.:ok]</rows>
        <cols />
      </table>
      <simple-id uuid='{BB05925A-6F0E-4791-B5E6-CF43EDCF73BD}' />
    </worksheet>
    <worksheet name='TrainAndScore'>
      <table>
        <view>
          <datasources>
            <datasource caption='Titanic Training' name='federated.0jbz83q0w4bmof1e5znwe01jspvs' />
          </datasources>
          <datasource-dependencies datasource='federated.0jbz83q0w4bmof1e5znwe01jspvs'>
            <column datatype='real' name='[Age]' role='measure' type='quantitative' />
            <column caption='TrainScoreDeploy' datatype='string' name='[Calculation_2846837937960083456]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;from tabpy_client import Client&#13;&#10;import json&#13;&#10;AUTOMODEL_URL = &apos;https://go-develop.rapidminer.com&apos;&#13;&#10;&#13;&#10;tabclient = Client(&apos;http://localhost:9004/&apos;)&#13;&#10;&#13;&#10;&#13;&#10;Survived = _arg1&#13;&#10;Age = _arg2&#13;&#10;Passenger = _arg3&#13;&#10;Sex = _arg4&#13;&#10;Siblings = _arg5&#13;&#10;Parents = _arg6&#13;&#10;Fair = _arg7&#13;&#10;&#13;&#10;traindataframe = pd.DataFrame(&#13;&#10;    {&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;: Parents,&#13;&#10;     &apos;Fair&apos;: Fair})&#13;&#10;traindataframe[&apos;Age&apos;] = traindataframe[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Siblings&apos;] = traindataframe[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Parents&apos;] = traindataframe[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe[&apos;Fair&apos;] = traindataframe[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;traindataframe = traindataframe.dropna(subset=[&apos;Survived&apos;])&#13;&#10;&#13;&#10;scoredataframe = pd.DataFrame(&#13;&#10;    {&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;: Parents,&#13;&#10;     &apos;Fair&apos;: Fair})&#13;&#10;scoredataframe[&apos;Age&apos;] = scoredataframe[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;scoredataframe[&apos;Siblings&apos;] = scoredataframe[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;scoredataframe[&apos;Parents&apos;] = scoredataframe[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;scoredataframe[&apos;Fair&apos;] = scoredataframe[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;scoredataframe = scoredataframe[pd.isnull(scoredataframe[&apos;Survived&apos;])]&#13;&#10;&#13;&#10;&#13;&#10;# dataframe to json&#13;&#10;scoreJsonConversion = scoredataframe.to_json(orient=&apos;records&apos;)&#13;&#10;scoreJsonValue = json.loads(scoreJsonConversion)&#13;&#10;&#13;&#10;# dataframe to json&#13;&#10;trainJsonConversion = traindataframe.to_json(orient=&apos;records&apos;)&#13;&#10;trainJsonValue = json.loads(trainJsonConversion)&#13;&#10;&#13;&#10;&#13;&#10;trainAndPredictionList = tabclient.query(&apos;RapidMinerTrainAndScore&apos;, AUTOMODEL_URL,&apos;vsivakumar@rapidminer.com&apos;, &apos;wXv2jBF&amp;v2Nm&apos;, trainJsonValue, scoreJsonValue, &apos;Survived&apos;, &apos;tableauclient&apos;)&#13;&#10;print(trainAndPredictionList[&apos;response&apos;])&#13;&#10; &#13;&#10;return trainAndPredictionList[&apos;response&apos;]&#13;&#10;&quot;,&#13;&#10;ATTR([Survived]),ATTR([Age]),ATTR([Passenger]),ATTR([Sex]),ATTR([Siblings]),ATTR([Parents]),ATTR([Fair]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' name='[Fair]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Parents]' role='measure' type='quantitative' />
            <column datatype='string' name='[Passenger]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Row No.]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Siblings]' role='measure' type='quantitative' />
            <column datatype='string' name='[Survived]' role='dimension' type='nominal' />
            <column-instance column='[Row No.]' derivation='None' name='[none:Row No.:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_2846837937960083456]' derivation='User' name='[usr:Calculation_2846837937960083456:nk]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837937960083456:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='shape' value=':filled/asterisk' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Row No.:ok]</rows>
        <cols />
      </table>
      <simple-id uuid='{E21C8A9A-5FC8-4ABC-9CB7-EA3F5E1AD0CA}' />
    </worksheet>
    <worksheet name='quickTrain'>
      <table>
        <view>
          <datasources>
            <datasource caption='Titanic Training' name='federated.0jbz83q0w4bmof1e5znwe01jspvs' />
          </datasources>
          <datasource-dependencies datasource='federated.0jbz83q0w4bmof1e5znwe01jspvs'>
            <column datatype='real' name='[Age]' role='measure' type='quantitative' />
            <column caption='QuickTrain' datatype='string' name='[Calculation_1924725917076062209]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import os&#13;&#10;import sys&#13;&#10;import pandas as pd&#13;&#10;from tabpy_client import Client&#13;&#10;&#13;&#10;AUTOMODEL_URL = &apos;https://go-develop.rapidminer.com&apos;&#13;&#10;tabclient = Client(&apos;http://localhost:9004/&apos;)&#13;&#10;&#13;&#10;&#13;&#10;import tabpy&#13;&#10;import json&#13;&#10;&#13;&#10;Survived = _arg1&#13;&#10;Age = _arg2&#13;&#10;Passenger = _arg3&#13;&#10;Sex = _arg4&#13;&#10;Siblings = _arg5&#13;&#10;Parents = _arg6&#13;&#10;Fair = _arg7&#13;&#10;&#13;&#10;data = pd.DataFrame(&#13;&#10;    {&apos;Survived&apos;: Survived, &apos;Age&apos;: Age, &apos;Passenger&apos;: Passenger, &apos;Sex&apos;: Sex, &apos;Siblings&apos;: Siblings, &apos;Parents&apos;: Parents,&#13;&#10;     &apos;Fair&apos;: Fair})&#13;&#10;data[&apos;Age&apos;] = data[&apos;Age&apos;].astype(&apos;float64&apos;)&#13;&#10;data[&apos;Siblings&apos;] = data[&apos;Siblings&apos;].astype(&apos;float64&apos;)&#13;&#10;data[&apos;Parents&apos;] = data[&apos;Parents&apos;].astype(&apos;float64&apos;)&#13;&#10;data[&apos;Fair&apos;] = data[&apos;Fair&apos;].astype(&apos;float64&apos;)&#13;&#10;data = data.dropna(subset=[&apos;Survived&apos;])&#13;&#10;&#13;&#10;&#13;&#10;# dataframe to json&#13;&#10;responseJSON = data.to_json(orient=&apos;records&apos;)&#13;&#10;dataId = json.loads(responseJSON)&#13;&#10;print(data)&#13;&#10;&#13;&#10;returnResult = tabclient.query(&apos;Rapidminer_Quick_Automodel&apos;, AUTOMODEL_URL, &apos;vsivakumar@rapidminer.com&apos;,&apos;wXv2jBF&amp;v2Nm&apos;, dataId, &apos;Survived&apos;, &apos;tableauclient&apos;)&#13;&#10;print(returnResult[&apos;response&apos;])&#13;&#10;&#13;&#10;return returnResult[&apos;response&apos;]&#13;&#10;&quot;,&#13;&#10;ATTR([Survived]),ATTR([Age]),ATTR([Passenger]),ATTR([Sex]),ATTR([Siblings]),ATTR([Parents]),ATTR([Fair]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' name='[Fair]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Parents]' role='measure' type='quantitative' />
            <column datatype='string' name='[Passenger]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Row No.]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Siblings]' role='measure' type='quantitative' />
            <column datatype='string' name='[Survived]' role='dimension' type='nominal' />
            <column-instance column='[Row No.]' derivation='None' name='[none:Row No.:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Survived]' derivation='None' name='[none:Survived:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1924725917076062209]' derivation='User' name='[usr:Calculation_1924725917076062209:nk:1]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Survived:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Survived:nk]' member='&quot;No&quot;' />
              <groupfilter function='member' level='[none:Survived:nk]' member='&quot;Yes&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Survived:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_1924725917076062209:nk:1]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Row No.:ok]</rows>
        <cols />
      </table>
      <simple-id uuid='{9B5569BD-A98A-4E2F-A831-E49C74CEBF0C}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='TrainAndScore'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837937960083456:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Flag:nk]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Passenger:nk]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Row No.:qk]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Sex:nk]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Survived:nk]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2361856543278223360:nk:16]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2361856543278223360:nk:21]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2361856543278223360:nk:2]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2361856543278223360:nk:3]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2361856543278223360:nk:4]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837937960083456:nk]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837938047246338:nk]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837938310324228:nk:1]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DF1D6673-081C-4D5C-8995-FCD3AF0FDCD3}' />
    </window>
    <window class='worksheet' name='Train'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837938310324228:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Survived:nk]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837938310324228:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8DBB4310-A28F-4B3F-857F-58E432197BBE}' />
    </window>
    <window class='worksheet' maximized='true' name='Score'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837938047246338:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Survived:nk]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_2846837938047246338:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{63569389-F379-43DF-B82B-7EE6687467A5}' />
    </window>
    <window class='worksheet' name='quickTrain'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_1924725917076062209:nk:1]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[none:Survived:nk]</field>
            <field>[federated.0jbz83q0w4bmof1e5znwe01jspvs].[usr:Calculation_1924725917076062209:nk:1]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2128BF8F-0331-4488-BD8B-69A88B890195}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Score' width='144'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Train' width='144'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='TrainAndScore' width='144'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='quickTrain' width='144'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
